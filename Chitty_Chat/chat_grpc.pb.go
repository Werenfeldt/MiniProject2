// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Chitty_Chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Chitty_ChatClient is the client API for Chitty_Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Chitty_ChatClient interface {
	BroadcastMessage(ctx context.Context, opts ...grpc.CallOption) (Chitty_Chat_BroadcastMessageClient, error)
}

type chitty_ChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitty_ChatClient(cc grpc.ClientConnInterface) Chitty_ChatClient {
	return &chitty_ChatClient{cc}
}

func (c *chitty_ChatClient) BroadcastMessage(ctx context.Context, opts ...grpc.CallOption) (Chitty_Chat_BroadcastMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &Chitty_Chat_ServiceDesc.Streams[0], "/main.Chitty_Chat/BroadcastMessage", opts...)
	if err != nil {
		return nil, err
	}
	x := &chitty_ChatBroadcastMessageClient{stream}
	return x, nil
}

type Chitty_Chat_BroadcastMessageClient interface {
	Send(*BroadcastRequest) error
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type chitty_ChatBroadcastMessageClient struct {
	grpc.ClientStream
}

func (x *chitty_ChatBroadcastMessageClient) Send(m *BroadcastRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chitty_ChatBroadcastMessageClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chitty_ChatServer is the server API for Chitty_Chat service.
// All implementations must embed UnimplementedChitty_ChatServer
// for forward compatibility
type Chitty_ChatServer interface {
	BroadcastMessage(Chitty_Chat_BroadcastMessageServer) error
	
}

// UnimplementedChitty_ChatServer must be embedded to have forward compatible implementations.
type UnimplementedChitty_ChatServer struct {
}

func (UnimplementedChitty_ChatServer) BroadcastMessage(Chitty_Chat_BroadcastMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedChitty_ChatServer) mustEmbedUnimplementedChitty_ChatServer() {}

// UnsafeChitty_ChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Chitty_ChatServer will
// result in compilation errors.
type UnsafeChitty_ChatServer interface {
	mustEmbedUnimplementedChitty_ChatServer()
}

func RegisterChitty_ChatServer(s grpc.ServiceRegistrar, srv Chitty_ChatServer) {
	s.RegisterService(&Chitty_Chat_ServiceDesc, srv)
}

func _Chitty_Chat_BroadcastMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(Chitty_ChatServer).BroadcastMessage(&chitty_ChatBroadcastMessageServer{stream})
}

type Chitty_Chat_BroadcastMessageServer interface {
	Send(*BroadcastResponse) error
	Recv() (*BroadcastRequest, error)
	grpc.ServerStream
}

type chitty_ChatBroadcastMessageServer struct {
	grpc.ServerStream
}

func (x *chitty_ChatBroadcastMessageServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chitty_ChatBroadcastMessageServer) Recv() (*BroadcastRequest, error) {
	m := new(BroadcastRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Chitty_Chat_ServiceDesc is the grpc.ServiceDesc for Chitty_Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chitty_Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Chitty_Chat",
	HandlerType: (*Chitty_ChatServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BroadcastMessage",
			Handler:       _Chitty_Chat_BroadcastMessage_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chat.proto",
}
