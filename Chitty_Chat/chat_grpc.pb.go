// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package Chitty_Chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Chitty_ChatClient is the client API for Chitty_Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Chitty_ChatClient interface {
	BroadcastMessage(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type chitty_ChatClient struct {
	cc grpc.ClientConnInterface
}

func NewChitty_ChatClient(cc grpc.ClientConnInterface) Chitty_ChatClient {
	return &chitty_ChatClient{cc}
}

func (c *chitty_ChatClient) BroadcastMessage(ctx context.Context, in *BroadcastRequest, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, "/main.Chitty_Chat/BroadcastMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Chitty_ChatServer is the server API for Chitty_Chat service.
// All implementations must embed UnimplementedChitty_ChatServer
// for forward compatibility
type Chitty_ChatServer interface {
	BroadcastMessage(context.Context, *BroadcastRequest) (*BroadcastResponse, error)
	mustEmbedUnimplementedChitty_ChatServer()
}

// UnimplementedChitty_ChatServer must be embedded to have forward compatible implementations.
type UnimplementedChitty_ChatServer struct {
}

func (UnimplementedChitty_ChatServer) BroadcastMessage(context.Context, *BroadcastRequest) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BroadcastMessage not implemented")
}
func (UnimplementedChitty_ChatServer) mustEmbedUnimplementedChitty_ChatServer() {}

// UnsafeChitty_ChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Chitty_ChatServer will
// result in compilation errors.
type UnsafeChitty_ChatServer interface {
	mustEmbedUnimplementedChitty_ChatServer()
}

func RegisterChitty_ChatServer(s grpc.ServiceRegistrar, srv Chitty_ChatServer) {
	s.RegisterService(&Chitty_Chat_ServiceDesc, srv)
}

func _Chitty_Chat_BroadcastMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Chitty_ChatServer).BroadcastMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/main.Chitty_Chat/BroadcastMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Chitty_ChatServer).BroadcastMessage(ctx, req.(*BroadcastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chitty_Chat_ServiceDesc is the grpc.ServiceDesc for Chitty_Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chitty_Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "main.Chitty_Chat",
	HandlerType: (*Chitty_ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "BroadcastMessage",
			Handler:    _Chitty_Chat_BroadcastMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Chitty_Chat/chat.proto",
}
